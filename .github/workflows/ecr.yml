---
name: Build and push to ECR

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    inputs:
      aws-region:
        required: true
        type: string
      role-session-name:
        required: false
        type: string
        default: gh-actions
      role-to-assume:
        required: true
        type: string
      runs-on:
        required: false
        type: string
        default: ubuntu-latest
      ecr-repo-name:
        required: true
        type: string
      default-tag:
        required: false
        type: string
      image-tag:
        required: true
        type: string

jobs:
  prepare_ecr_access:
    runs-on: ${{ inputs.runs-on }}
    steps:

      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ inputs.aws-region }}
          role-session-name: ${{ inputs.role-session-name }}
          role-to-assume: ${{ inputs.role-to-assume }}

      - id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - id: build
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPO_NAME: ${{ inputs.ecr-repo-name }}
          IMAGE_TAG: ${{ inputs.image-tag }}
        run: |
          ECR_REPO="${ECR_REGISTRY}/${ECR_REPO_NAME}"
          IMAGE="${ECR_REPO}:${IMAGE_TAG}"
          docker build --tag "${IMAGE}" .
          docker push "${IMAGE}"
          echo "::set-output name=ecr-repo::${ECR_REPO}"
          echo "::set-output name=image::${IMAGE}"

      - if: inputs.default-tag != ''
        env:
          IMAGE: ${{ steps.build.outputs.image }}
          ECR_REPO: ${{ steps.build.outputs.ecr-repo }}
          DEFAULT_TAG: ${{ inputs.default-tag }}
        run: |
          docker tag "${IMAGE}" "${ECR_REPO}:${DEFAULT_TAG}"
          docker push "${ECR_REPO}:${DEFAULT_TAG}"
